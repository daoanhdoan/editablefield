<?php
/**
 *
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\Plugin\views\field\FieldHandlerInterface;
use Drupal\views\ViewExecutable;
use Drupal\views_entity_options\ViewsEntityOptions;

/**
 * Implementation of @see hook_field_formatter_info_alter().
 */
function editablefield_field_formatter_info_alter(&$info)
{
  $fields = \Drupal::service('plugin.manager.field.field_type')->getDefinitions();
  $all_types = array_keys($fields);
  $info['editablefield_formatter']['field_types'] = $all_types;
}

/**
 * implement & @see hook_views_pre_build()
 */
function editablefield_views_pre_build(ViewExecutable $view)
{
  if (!empty($view->field)) {
    $resetCache = FALSE;
    foreach ($view->field as $field_id => $field) {
      if (!empty($field->options['type']) && $field->options['type'] == 'editablefield_formatter') {
        $field->views_form_callback = 'editablefield_views_form';
        $resetCache = TRUE;
      }
    }
    if ($resetCache) {
      /** @var CachePluginBase $cache */
      $cache = $view->display_handler->getPlugin('cache');
      //$key = $cache->generateResultsKey();
      //if (!Drupal::cache('data')->get($key, TRUE)) {
        //$cache->cacheFlush();
      //}
    }
  }
}

/**
 * @param $form
 * @param FormStateInterface $form_state
 * @param $form_id
 */
function editablefield_views_form(ViewExecutable $view, FieldHandlerInterface $field, &$form, FormStateInterface &$form_state)
{
  $field->definition['click sortable'] = TRUE;
  if (!empty($field->options['type']) && ($field->options['type'] == 'editablefield_formatter')) {
    $form += \Drupal::service('editablefield.form')->viewsForm($form, $form_state, $view, $field);
  }
}

function convert($size)
{
  $unit=array('b','kb','mb','gb','tb','pb');
  return @round($size/pow(1024,($i=floor(log($size,1024)))),2).' '.$unit[$i];
}

/**
 * Implement hook_template_preprocess_views_view_field()
 */
function editablefield_preprocess_views_view_field(&$variables)
{
  if (!empty($variables['field']->options['type']) && $variables['field']->options['type'] == 'editablefield_formatter') {
    $text = '<!--form-item-' . $variables['field']->options['id'] . '--' . $variables['row']->index . '-->';
    $variables['output'] = Markup::create($text);
  }
}

/**
 * Implements @see hook_form_FORM_ID_alter() for views_ui_config_item_form.
 */
function editablefield_form_views_ui_config_item_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if(!preg_match("/[[\w*\\\\]*]?Plugin\\\\views\\\\field[[\\\\\w*]*]?/", get_class($form_state->getStorage()['handler']))) {
    return;
  }

  $options = $form_state->getStorage()['handler']->options;
  if (!empty($options['type']) && $options['type'] == 'editablefield_formatter') {
    $form['actions']['submit']['#submit'][] = 'editablefield_form_views_ui_config_item_form_submit';
  }
}

/**
 * Form submission handler.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function editablefield_form_views_ui_config_item_form_submit(array &$form, FormStateInterface &$form_state) {
  $view = $form_state->get('view');
  $display_id = $form_state->get('display_id');
  $id = $form_state->get('id');
  $type = $form_state->get('type');
  $executable = $view->getExecutable();
  $handler = $executable->getHandler($display_id, $type, $id);

  // Set values.
  $state_options = $form_state->getValue('options', []);

  if (!empty($state_options['settings'])) {

    $handler['settings'] = $state_options['settings'];
    // Removing the form values of the views link attributes module.
    $executable->setHandler($display_id, $type, $id, $handler);
    // Write to cache
    $view->cacheSet();
  }
}


/**
 * @see hook_form_FORM_ID_alter()
 */
function editablefield_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  if (preg_match("/^views_form_\.*/", $form_id)) {
    /** @var ViewExecutable $view */
    $view = NULL;
    foreach ($form_state->getBuildInfo()['args'] as $item) {
      if ($item instanceof ViewExecutable) {
        $view = $item;
        break;
      }
    }
    //$fields = $view->display_handler->getHandlers('field');
    $substitutions = [];
    foreach ($view->field as $field_name => $field) {
      $form_element_name = $field_name;
      if (method_exists($field, 'form_element_name')) {
        $form_element_name = $field->form_element_name();
      }
      $method_form_element_row_id_exists = FALSE;
      if (method_exists($field, 'form_element_row_id')) {
        $method_form_element_row_id_exists = TRUE;
      }

      // If the field provides a views form, allow it to modify the $form array.
      $has_form = FALSE;
      if (property_exists($field, 'views_form_callback')) {
        $callback = $field->views_form_callback;
        $callback($view, $field, $form, $form_state);
        $has_form = TRUE;
      }

      // Build the substitutions array for use in the theme function.
      if ($has_form) {
        foreach ($view->result as $row_id => $row) {
          if ($method_form_element_row_id_exists) {
            $form_element_row_id = $field->form_element_row_id($row_id);
          }
          else {
            $form_element_row_id = $row_id;
          }

          $substitutions[] = [
            'placeholder' => '<!--form-item-' . $form_element_name . '--' . $form_element_row_id . '-->',
            'field_name' => $form_element_name,
            'row_id' => $form_element_row_id,
          ];
        }
      }
    }
    if (!empty($form['#substitutions']['#value'])) {
      $form['#substitutions']['#value'] = array_merge($form['#substitutions']['#value'], $substitutions);
    }
    else {
      $form['#substitutions'] = [
        '#type' => 'value',
        '#value' => $substitutions,
      ];
    }
  }
}
